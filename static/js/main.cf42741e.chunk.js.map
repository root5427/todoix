{"version":3,"sources":["conext.js","todo/TodoItem.js","todo/TodoList.js","todo/AddTodo.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","borderBottom","marginBottom","input","marginRight","cursor","TodoItem","todo","onChange","index","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","AddTodo","onCreate","defaultValue","useState","value","setValue","bind","event","target","clear","useInputValue","onSubmit","preventDefault","trim","placeholder","App","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","filter","color","concat","Date","now","Loader","length","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf42741e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Context from \"../conext\";\r\nimport \"./TodoItem.css\";\r\nconst styles = {\r\n  li: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: \".5rem 1rem\",\r\n    // border: \"1px solid #ccc\",\r\n    borderBottom: \"1px solid #ccc\",\r\n    marginBottom: \".5rem\"\r\n  },\r\n  input: {\r\n    marginRight: \"1rem\",\r\n    cursor: \"pointer\"\r\n  }\r\n};\r\n\r\nfunction TodoItem({ todo, index, onChange }) {\r\n  const { removeTodo } = useContext(Context);\r\n  const classes = [];\r\n  if (todo.completed) {\r\n    classes.push(\"done\");\r\n  }\r\n  return (\r\n    <li style={styles.li}>\r\n      <span className={classes.join(\" \")}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={todo.completed}\r\n          style={styles.input}\r\n          onChange={() => onChange(todo.id)}\r\n        ></input>\r\n        &nbsp;\r\n        {todo.title}\r\n      </span>\r\n      <button className=\"rm\" onClick={() => removeTodo(todo.id)}>\r\n        <i className=\"fas fa-trash black\"></i>\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: \"none\",\r\n    margin: 0,\r\n    padding: 0\r\n  }\r\n};\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {props.todos.map((todo, index) => {\r\n        return (\r\n          <TodoItem\r\n            todo={todo}\r\n            key={todo.id}\r\n            index={index}\r\n            onChange={props.onToggle}\r\n          ></TodoItem>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./AddTodo.css\";\r\n\r\nfunction useInputValue(defaultValue = \"\") {\r\n  const [value, setValue] = useState(defaultValue);\r\n  return {\r\n    bind: {\r\n      value,\r\n      onChange: event => setValue(event.target.value)\r\n    },\r\n    clear: () => setValue(\"\"),\r\n    value: () => value\r\n  };\r\n}\r\n\r\nfunction AddTodo({ onCreate }) {\r\n  const input = useInputValue(\"\");\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    if (input.value().trim()) {\r\n      onCreate(input.value());\r\n      input.clear();\r\n    }\r\n  }\r\n  return (\r\n    <form className=\"addTodo\" onSubmit={submitHandler}>\r\n      <input\r\n        {...input.bind}\r\n        className=\"todoTitle\"\r\n        placeholder=\"Enter your todo\"\r\n      ></input>\r\n      <button type=\"submit\" className=\"addTodoBtn\">\r\n        Add todo\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  onCreate: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nexport default () => (\r\n  <div style={{ display: \"flex\", justifyContent: \"center\", margin: \".5rem\" }}>\r\n    <div className=\"lds-ellipsis\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { useEffect } from \"react\";\nimport TodoList from \"./todo/TodoList\";\nimport Context from \"./conext\";\nimport AddTodo from \"./todo/AddTodo\";\nimport Loader from \"./Loader\";\nfunction App() {\n  const [todos, setTodos] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=5\")\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(() => {\n          setTodos(todos);\n          setLoading(false);\n        }, 2000);\n      });\n  }, []);\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  function addTodo(title) {\n    setTodos(\n      todos.concat([\n        {\n          title: title,\n          id: Date.now(),\n          completed: false\n        }\n      ])\n    );\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>\n          To<span style={{ color: \"#eb4034\" }}>d</span>oix\n        </h1>\n        <AddTodo onCreate={addTodo}></AddTodo>\n        {loading && <Loader />}\n        {todos.length ? (\n          <TodoList todos={todos} onToggle={toggleTodo}></TodoList>\n        ) : loading ? null : (\n          <p>No todos</p>\n        )}\n        <footer>\n          <p>\n            Developed by{\" \"}\n            <a\n              href=\"https://devix.space/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Devix Rootix\n            </a>\n          </p>\n        </footer>\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}